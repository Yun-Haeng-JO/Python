{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOTKkGdGcYaKxIvRpIYkRf2",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Yun-Haeng-JO/Python/blob/main/%ED%8C%8C%EC%9D%B4%EC%8D%AC6%EC%B0%A8%EC%8B%9C_2024_04_28.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 1-1\n",
        "str = input(\"How old are you\")\n",
        "print(str , 'years old', sep='')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RuJ52VgFB0R_",
        "outputId": "901fd46a-8f79-492f-ef45-c8ac8b1d97fb"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "How old are you20\n",
            "20years old\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 1-2번\n",
        "x = float(input('number : '))\n",
        "print(x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RDie0GlnB272",
        "outputId": "8df022ca-a2a9-4986-9f72-90a6230cb740"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "number : 20\n",
            "20.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#1-3\n",
        "year = input(\"This year: \")\n",
        "year = eval(year)\n",
        "year = year + 1\n",
        "print(\"Next year:\", year)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-xKqhmpmB4Qu",
        "outputId": "4a993fc1-f850-48ac-8474-bb3cbf0220ff"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "This year: 2024\n",
            "Next year: 2025\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#2\n",
        "i= 0\n",
        "result = 0\n",
        "while i < 5:\n",
        "\t\ta = input(\"성적 입력 : \")\n",
        "\t\tresult += int(a)\n",
        "\t\ti += 1\n",
        "print(f'평균 : {result / 5}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VuZTw7lHB5bG",
        "outputId": "c20b3d0c-c5d9-42c5-ecfd-8d3b7b18c806"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "성적 입력 : 100\n",
            "성적 입력 : 90\n",
            "성적 입력 : 80\n",
            "성적 입력 : 70\n",
            "성적 입력 : 60\n",
            "평균 : 80.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#3-1\n",
        "test_list = ['one','two','three']\n",
        "for i in test_list:\n",
        "  print(i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RcjHwNBtB6j2",
        "outputId": "9b351c11-803e-4c64-d3a9-5e193a337125"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "one\n",
            "two\n",
            "three\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#3-2\n",
        "for i in range(10):\n",
        "    print(i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oRVzcyEyB71n",
        "outputId": "0f0b6837-2313-4b30-fbf7-a7b6b6e581f2"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n",
            "7\n",
            "8\n",
            "9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#3-3\n",
        "index = 0\n",
        "s = \"BlockDMask\"\n",
        "for a in s:\n",
        "    if a == 'k':\n",
        "        break    # 'k'를 찾았으니 for문에서 나와랏!\n",
        "\n",
        "    index = index + 1\n",
        "\n",
        "\n",
        "print(index)    # 'k'가 첫번째로 존재하는 위치 출력"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CYPpSPctB9GP",
        "outputId": "99f108d1-d820-4062-dcec-4ae7e218a969"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#3-4\n",
        "result = 0\n",
        "for a in range(1,101):  # 1 ~ 100\n",
        "    result = result + a    # a를 더해주고\n",
        "\n",
        "    if result > 100:    # result가 100이 넘었을때\n",
        "        print(a)        # 그때의 a값을 출력\n",
        "        break\n",
        "\n",
        "print(result)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lIWGr84xB_Hn",
        "outputId": "4dc38edb-9cc0-40e7-8614-1db54c3a31ad"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "14\n",
            "105\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#3-5\n",
        "student = [180, 170, 164, 199, 182, 172, 177]\n",
        "for a in student:\n",
        "    if a > 170:\n",
        "        continue  # 키가 170보다 크면 continue\n",
        "\n",
        "    print(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qQUy3pCeCAnP",
        "outputId": "a9c900d9-5aa2-413d-c940-f4d96fb3deb7"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "170\n",
            "164\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#3-5\n",
        "result = 0\n",
        "for a in range(1,101):  #1 ~ 100\n",
        "    if a % 2 == 1:      #2로 나누었을때 나머지가 1\n",
        "        result = result + a\n",
        "\n",
        "print(result)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uoCnM0YFCCV3",
        "outputId": "3581a5dc-fc76-4039-c0a0-e308a04e3f62"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2500\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#3-6\n",
        "l = ['Alice','Bob','Charlie']\n",
        "\n",
        "for name in l:\n",
        "\t\tprint(name)\n",
        "else:\n",
        "\t\tprint('!!FIISH!!')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-2txYLzeCEIv",
        "outputId": "5fae3321-96e5-4747-a560-6e9986b45b95"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Alice\n",
            "Bob\n",
            "Charlie\n",
            "!!FIISH!!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for name in l:\n",
        "\t\tif name == 'Bob':\n",
        "\t\t\t\tprint('!BREAK!')\n",
        "\t\t\t\tbreak\n",
        "\t\tprint(name)\n",
        "else:\n",
        "\t\tprint('!!FINISH!!')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ono1ow00CFt3",
        "outputId": "f49104cb-4eb5-4ce7-902e-f48db5b94521"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Alice\n",
            "!BREAK!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#4\n",
        "sr = ['father', 'mother', 'brother']\n",
        "cnt = 0\n",
        "for s in sr:\n",
        "        for c in s:\n",
        "            if c == 'r':\n",
        "                cnt += 1\n",
        "print(cnt)\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k8qpwF-wCHJ3",
        "outputId": "3067285a-1b05-4e7e-9b80-b0775afac838"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#5-1\n",
        "a = []    # 빈 리스트 생성\n",
        "\n",
        "for i in range(10):\n",
        "    a.append(0)    # append로 요소 추가\n",
        "\n",
        "print(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i68Uc6dZCIXP",
        "outputId": "038c7f4d-564a-4d94-b2ff-5124e516e36a"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#5-2\n",
        "a = []    # 빈 리스트 생성\n",
        "\n",
        "for i in range(3):\n",
        "    line = []              # 안쪽 리스트로 사용할 빈 리스트 생성\n",
        "    for j in range(2):\n",
        "        line.append(0)     # 안쪽 리스트에 0 추가\n",
        "    a.append(line)         # 전체 리스트에 안쪽 리스트를 추가\n",
        "\n",
        "print(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "67r3g18sCJqf",
        "outputId": "50486167-9501-47ae-c0ed-87f64214b845"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0, 0], [0, 0], [0, 0]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#9-1\n",
        "print(list(range(0, 10, 3)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tpHcU0YRCK4n",
        "outputId": "cf80d14f-f5fe-4559-bd0d-0c2b1274ad24"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0, 3, 6, 9]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#9-2\n",
        "print(list(range(10, 0, -3)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7ahsaL5uCMO3",
        "outputId": "60a1a3db-8fee-4d9b-c5e7-cf597e602373"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[10, 7, 4, 1]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#9-3\n",
        "for i in range(10, 0, -3):\n",
        "\t\tprint(i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZQUhBx4iCNVo",
        "outputId": "df086466-e674-4e01-c457-1abd6c415ec7"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10\n",
            "7\n",
            "4\n",
            "1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#7-1\n",
        "l = ['Alice','Bob','Charlie']\n",
        "\n",
        "for name in l:\n",
        "\t\tprint(name)\n",
        "\n",
        "for i, name in enumerate(l):\n",
        "\t\tprint(i, name)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "65fk-oHqCOWv",
        "outputId": "38ba1a70-d7ef-42e2-9f80-c8809da1710d"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Alice\n",
            "Bob\n",
            "Charlie\n",
            "0 Alice\n",
            "1 Bob\n",
            "2 Charlie\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#7-2\n",
        "for i, name in enumerate(l, 1):\n",
        "\t\tprint(i, name)\n",
        "for i, name in enumerate(l, 42):\n",
        "\t\tprint(i, name)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZPL3-JHKCPTX",
        "outputId": "e78d89cb-14a3-4875-ac21-97995865eb61"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1 Alice\n",
            "2 Bob\n",
            "3 Charlie\n",
            "42 Alice\n",
            "43 Bob\n",
            "44 Charlie\n"
          ]
        }
      ]
    }
  ]
}
